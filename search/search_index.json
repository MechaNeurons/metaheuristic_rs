{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MetaHeuristic_rs","text":"<p>This is the documentation of these algorithms.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>src/\n    lib.rs\n    simulated_annealing.rs\nCargo.toml\n.gitignore\nreadme.md\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n</code></pre>"},{"location":"#algorithms","title":"Algorithms","text":"<p>Simulated Annealing</p>"},{"location":"algorithms/simulated_annealing/","title":"Simulated Annealing","text":""},{"location":"algorithms/simulated_annealing/#how-to-use","title":"How to use","text":"<ol> <li>First import <code>Float</code> trait from <code>num_trait</code> and <code>SimulatedAnnealing</code> struct and <code>Energy</code> trait from <code>simulated_annealing</code></li> </ol> <p><pre><code>use num_traits::Float;\nuse simulated_annealing::{GetEnergy, SimulatedAnnealing};\n</code></pre> 2. Now you must implement <code>get_energy</code> function for the <code>SimulatedAnnealing</code> for the objective function you want to maximize. For example if your objective function is $-(x-2)^2$ then you can use the code below.</p> <p><pre><code>impl&lt;T: Float + Display&gt; GetEnergy&lt;T&gt; for SimulatedAnnealing&lt;T&gt; {\n     fn get_energy(&amp;self, x: T) -&gt; T {\n        -(x - T::from(2).unwrap()).powi(2)\n     }\n }\n</code></pre> 3. In your main function create an instance of <code>SimulatedAnnealing</code> struct using <code>new()</code> and give it the right parameters. and then run optimize method on your problem.</p> <p><pre><code>let mut problem = SimulatedAnnealing::new(min_cor: T,max_cor: T,min_temp: T,max_temp: T,cooling_rate: T,initial_state: T);\nproblem.optimize();\n</code></pre> The <code>SimulatedAnnealing</code> is a generic type so you must use only one type.</p>"}]}